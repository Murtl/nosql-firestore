import { Firestore } from '@google-cloud/firestore';
process.env.FIRESTORE_EMULATOR_HOST = 'localhost:8080';

const db = new Firestore({ projectId: 'custom-emulator', ssl: false });

async function aufgabe6() {
    console.log('üóëÔ∏è Aufgabe 6: Delete Queries\n');

    // a) L√∂sche die Kursliteratur f√ºr "C-Programmierung"

    /**
     * @old-relational-table KursLit
     * @collection kursliteratur
     * @id KursNr wird als Dokumenten-ID verwendet (z.B.: "P13" f√ºr C-Programmierung)
     * @note
     *   üî∏ In SQL: Eine einfache DELETE-Anweisung mit WHERE-Subquery reicht aus, z.B.:
     *       DELETE FROM KursLit WHERE KursNr = (SELECT KursNr FROM Kurs WHERE Titel = 'C-Programmierung');
     *   üîπ In Firestore: Kein JOIN m√∂glich ‚Äì KursNr muss zuerst √ºber Titel ermittelt und dann manuell zum L√∂schen verwendet werden.
     *   üîπ Kein direkter Fremdschl√ºssel ‚Äì KursNr dient als lose Verkn√ºpfung; Datenintegrit√§t muss durch Anwendung gew√§hrleistet werden.
     * @delete
     *   L√∂scht alle Dokumente aus "kursliteratur", bei denen KursNr mit der des Kurses "C-Programmierung" √ºbereinstimmt.
     * @differences-to-sql
     *   Firestore ben√∂tigt mehrere Schritte (1. Kurs suchen, 2. KursNr holen, 3. Kursliteratur manuell l√∂schen),
     *   w√§hrend SQL dies direkt √ºber verkn√ºpfte Tabellen abbildet.
     */
    const kursSnapshot = await db.collection('kurse').where('Titel', '==', 'C-Programmierung').get();
    if (kursSnapshot.empty) {
        console.log('‚ùå Kurs "C-Programmierung" nicht gefunden.');
        return;
    }
    const kursNr = kursSnapshot.docs[0].id;
    const kursLiteraturSnapshot = await db.collection('kursliteratur').where('KursNr', '==', kursNr).get();
    if (kursLiteraturSnapshot.empty) {
        console.log('‚ùå Keine Kursliteratur f√ºr "C-Programmierung" gefunden.');
        return;
    }
    for (const doc of kursLiteraturSnapshot.docs) {
        await doc.ref.delete();
        console.log(`üìö Kursliteratur ${doc.id} f√ºr "C-Programmierung" gel√∂scht.`);
    }

    // b) L√∂sche alle Kurse mit weniger als 2 Teilnehmern

    /**
     * @old-relational-table Nimmt_teil, Angebot
     * @collections teilnahmen, angebote
     * @id
     *   In "teilnahmen": Dokumenten-ID = AngNr_KursNr_TnNr
     *   In "angebote": Dokumenten-ID = AngNr_KursNr (z.‚ÄØB. "2_P13")
     * @logic
     *   üî∏ In SQL: Man k√∂nnte dies mit einem GROUP BY + COUNT(*) und HAVING < 2 l√∂sen, z.‚ÄØB.:
     *       DELETE FROM Angebot WHERE (AngNr, KursNr) IN (
     *           SELECT AngNr, KursNr FROM Nimmt_teil GROUP BY AngNr, KursNr HAVING COUNT(*) < 2
     *       );
     *   üîπ In Firestore: Kein GROUP BY ‚Äì manuelles Z√§hlen notwendig.
     *       Kursangebot muss anhand der dokumentierten Teilnahmebeziehungen analysiert und gel√∂scht werden.
     * @risk
     *   üî∏ In SQL: Mit referentieller Integrit√§t k√∂nnte man verbundene Datens√§tze konsistent mitl√∂schen (z.‚ÄØB. via ON DELETE CASCADE).
     *   üîπ In Firestore: Nur das Angebot wird gel√∂scht ‚Äì Daten in anderen Collections wie "gebuehren" oder "fuehrt_durch" bleiben bestehen,
     *       was zu Inkonsistenzen f√ºhren kann, wenn nicht separat bereinigt.
     * @difference-to-sql
     *   SQL behandelt Beziehungen automatisch und unterst√ºtzt m√§chtige Abfragen; Firestore erfordert iteratives Denken und Verantwortung
     *   f√ºr Konsistenz in der Anwendung selbst.
     */
    const teilnahmenSnapshot = await db.collection('teilnahmen').get();
    const kursZaehler = {};

    teilnahmenSnapshot.forEach(doc => {
        const kursKey = `${doc.data().KursNr}_${doc.data().AngNr}`;
        kursZaehler[kursKey] = (kursZaehler[kursKey] || 0) + 1;
    });

    for (const [key, count] of Object.entries(kursZaehler)) {
        if (count < 2) {
            const [kursNr, angNr] = key.split('_');
            const angebotDocId = `${angNr}_${kursNr}`;
            await db.collection('angebote').doc(angebotDocId).delete();
            console.log(`üóëÔ∏è Angebot ${angebotDocId} gel√∂scht, da weniger als 2 Teilnehmer.`);
        }
    }
}

await aufgabe6();
