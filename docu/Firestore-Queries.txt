### Alle durchgef√ºhrten Anfragen

Firestore-Queries.txt Datei der Gruppe 05 mit der Datenbank Firestore und dem Projektteam:
Peter Fischer - 2210654
Leonelle Tifani Kommegne Kammegne - 2209740
Michael Mertl - 2209076
Gregor Pfister - 2209779
Jana Sophie Schweizer - 2209427

Nachfolgend sind die Abfragen f√ºr die einzelnen Aufgaben der Semesteraufgabe aufgelistet. Dabei wird zuerst die von
uns gebaute Funktion f√ºr die jeweilige Aufgabe aufgezeigt und direkt im Anschluss jeweils die konkreten Ausgaben
bei Ausf√ºhrung der Funktion.

#### Aufgabe 4: Read Queries:
async function aufgabe4() {
    console.log('üìñ Aufgabe 4: Read Queries\n');

    /**
     * Man k√∂nnte jede Collection bzw. ihre Sub-Collections hier vorladen und in den Abfragen nutzen.
     * Wir machen das aber nicht so, weil wir die Teilaufgaben jeweils einzeln betrachten wollen, um
     * die einzelnen n√∂tigen Schritte jeweils zu verdeutlichen.
    */

    // a) alle Orte, an denen Kurse durchgef√ºhrt werden
    /**
     * @old-relational-table Angebot
     * @collections angebote
     *
     * @logic
     * üî∏ In SQL:
     *     SELECT DISTINCT Ort FROM Angebot;
     *  üîπ In Firestore:
     *     Alle Angebote abfragen und die Orte in einem Set speichern (um Duplikate zu vermeiden).
     *
     * @difference-to-sql
     *  Firestore unterst√ºtzt keine DISTINCT-Abfrage, daher muss manuell ein Set verwendet werden,
     *  um Duplikate zu entfernen.
     */
    const angeboteSnapshot = await db.collection('angebote').withConverter(createConverter<Angebot>()).get();
    const orte = new Set(angeboteSnapshot.docs.map(a => a.data().Ort));
    console.log('üìç Orte:', [...orte]);

    // b) die Teilnehmer aus Augsburg
    /**
     * @old-relational-table Teilnehmer
     * @collections teilnehmer
     *
     * @logic
     *  üî∏ In SQL:
     *      SELECT * FROM Teilnehmer WHERE Ort = 'Augsburg';
     *  üîπ In Firestore:
     *    Alle Teilnehmer mit Ort = 'Augsburg' abfragen.
     *
     * @difference-to-sql
     *  Firestore unterst√ºtzt WHERE-Filter, daher ist die Abfrage sehr √§hnlich.
     */
    const teilnehmerAusAugsburg = await db.collection('teilnehmer').withConverter(createConverter<Teilnehmer>())
        .where('Ort', '==', 'Augsburg').get();
    console.log('\nüë• Teilnehmer aus Augsburg:');
    teilnehmerAusAugsburg.forEach(t => console.log(`- ${t.data().Name}`));

    // c) die Kursleiter mit einem Gehalt zwischen 3000 ‚Ç¨ und 4000 ‚Ç¨, sortiert nach Namen
    /**
     * @old-relational-table Kursleiter
     * @collections kursleiter
     *
     * @logic
     *  üî∏ In SQL:
     *      SELECT * FROM Kursleiter WHERE Gehalt BETWEEN 3000 AND 4000 ORDER BY Name;
     *  üîπ In Firestore:
     *      Alle Kursleiter mit Gehalt >= 3000 und <= 4000 abfragen und nach Name sortieren.
     *
     * @difference-to-sql
     *  Sehr identisch, da Firestore auch WHERE und ORDER BY unterst√ºtzt.
     */
    const kursleiterSnapshot = await db.collection('kursleiter').withConverter(createConverter<Kursleiter>())
        .where('Gehalt', '>=', 3000).where('Gehalt', '<=', 4000).orderBy('Name').get();
    console.log('\nüë©‚Äçüè´ Kursleiter (Gehalt 3000‚Ç¨-4000‚Ç¨):');
    kursleiterSnapshot.forEach(k => console.log(`- ${k.data().Name}: ${k.data().Gehalt}‚Ç¨`));

    // d) die Kurstitel mit Datum und Ort, an dem sie stattfinden
    /**
     * @old-relational-table Angebot, Kurs
     * @collections angebote
     *
     * @logic
     * üî∏ In SQL:
     *   SELECT k.Titel, a.Datum, a.Ort
     *   FROM Angebot a JOIN Kurs k ON a.KursNr = k.KursNr;
     *
     * üîπ In Firestore:
     *   - Alle Dokumente aus der Collection 'angebote' lesen
     *   - F√ºr jedes Angebot die gefragten Informationen ausgeben
     *   - Datum (Timestamp) wird per .toDate().toLocaleDateString() in lesbares Format umgewandelt
     *   - Ausgabe: angebot.KursTitel, angebot.Datum, angebot.Ort
     *
     * @difference-to-sql
     *   In SQL erfolgt die Verkn√ºpfung √ºber JOIN automatisch in einer Abfrage.
     *   In Firestore haben wir durch die Redundanz in der Collection 'angebote' die KursTitel
     *   bereits im Angebot gespeichert (Vorteil unserer Datenstruktur).
     */
    const angeboteSnapshot1 = await db.collection('angebote').withConverter(createConverter<Angebot>()).get();
    console.log('\nüìö Kurstitel mit Datum und Ort:');
    for (const angebotDoc of angeboteSnapshot1.docs) {
        console.log(`- ${angebotDoc.data()?.KursTitel}: ${angebotDoc.data().Datum.toDate().toLocaleDateString()} in ${angebotDoc.data().Ort}`);
    }

    // e) Anfrage d) mit zus√§tzlicher Ausgabe der Kursleiter
    /**
     * @old-relational-table Angebot, Kurs, Fuehrt_durch, Kursleiter
     * @collections angebote, angebote/{AngNr_KursNr}/kursleiter (Sub-Collection aus angebote)
     *
     * @logic
     * üî∏ In SQL:
     *   SELECT k.Titel, a.Datum, a.Ort, l.Name
     *   FROM Angebot a
     *   JOIN Kurs k ON a.KursNr = k.KursNr
     *   JOIN Fuehrt_durch f ON f.AngNr = a.AngNr AND f.KursNr = a.KursNr
     *   JOIN Kursleiter l ON f.PersNr = l.PersNr;
     *
     * üîπ In Firestore:
     *   - Alle Angebote aus 'angebote' laden
     *   - Kursleiter liegen als Sub-Collection unter dem Angebot: 'angebote/{AngNr_KursNr}/kursleiter'
     *
     * @difference-to-sql
     *   In SQL wird alles in einem JOIN abgebildet.
     *   In Firestore muss die zugeh√∂rige Sub-Collection 'kursleiter' f√ºr jedes Angebot separat geladen werden.
     *   Au√üerdem haben wir durch die Redundanz in der Collection 'angebote' die KursTitel
     *   bereits im Angebot gespeichert (Vorteil unserer Datenstruktur).
     */
    console.log('\nüìö Kurstitel mit Datum, Ort und Kursleiter:');
    const angeboteSnapshot2 = await db.collection('angebote').withConverter(createConverter<Angebot>()).get();
    for (const angebotDoc of angeboteSnapshot2.docs) {
        const angebotData = angebotDoc.data();
        const kursleiterSnap = await angebotDoc.ref.collection('kursleiter').withConverter(createConverter<Kursleiter>()).get();
        let kursleiterName = kursleiterSnap.docs.map(doc => doc.data().Name).join(', ');
        if (kursleiterName.length === 0) {
            console.warn(`‚ö†Ô∏è Kursleiter f√ºr Angebot ${angebotDoc.id} nicht gefunden.`);
            kursleiterName = 'Unbekannt';
            continue;
        }
        console.log(`- ${angebotData?.KursTitel}: ${angebotData?.Datum.toDate().toLocaleDateString()}, in ${angebotData?.Ort}, Kursleiter: ${kursleiterName}`);
    }

    // f) alle Kurstitel mit den Titeln der Kurse, die daf√ºr Voraussetzung sind. Hat ein Kurs keine Voraussetzungen,
    // so soll dieses Feld NULL sein. Achten Sie auf vern√ºnftige Spalten√ºberschriften. Die Ausgabe soll nach Kursen
    // sortiert erfolgen
    /**
     * @old-relational-table Kurs, Vorauss
     * @collections kurse, kurse/{KursNr}/voraussetzungen (Sub-Collection aus Kurse)
     *
     * @logic
     * üî∏ In SQL:
     *   SELECT k.Titel, v.VorNr
     *   FROM Kurs k
     *   LEFT JOIN Vorauss v ON k.KursNr = v.KursNr;

     * üîπ In Firestore:
     *   - Alle Dokumente aus 'kurse' laden
     *   - F√ºr jeden Kurs: Sub-Collection 'voraussetzungen' abrufen
     *   - F√ºr jede Voraussetzung (v.id): den Kurs √ºber 'kurse[v.id]' nachladen
     *   - Ausgabe: Titel des Kurses + Titel der Voraussetzungen

     * @difference-to-sql
     *   In SQL ist das ein einfacher LEFT JOIN.
     *   In Firestore:
     *     - Jede Voraussetzung f√ºr einen spezifischen Kurstitel muss separat gelesen werden (mehrere Reads)
     *     - Sub-Collections sind an Kurs gebunden ‚Äì globale Analyse erschwert
     *     - NULL-Werte m√ºssen manuell ersetzt werden
     */
    console.log('\nüìö Kurstitel mit Voraussetzungen:');
    console.log('Kurs\t\t\t Voraussetzungen');

    const kurseSnapshot = await db.collection('kurse')
        .withConverter(createConverter<Kurs>())
        .get();

    // Array f√ºr Ergebnisse
    const results: { kursTitel: string; voraussetzungen: string[] | null }[] = [];

    for (const kursDoc of kurseSnapshot.docs) {
        const kurs = kursDoc.data();
        const vorausSnap = await kursDoc.ref.collection('voraussetzungen').get();

        if (vorausSnap.empty) {
            results.push({
                kursTitel: kurs.Titel,
                voraussetzungen: null
            });
        } else {
            const vorausTitel = await Promise.all(
                vorausSnap.docs.map(async v => {
                    const vSnap = await db.collection('kurse').doc(v.id).withConverter(createConverter<Kurs>()).get();
                    return vSnap.exists ? vSnap.data()?.Titel ?? 'NULL' : 'NULL';
                })
            );

            results.push({
                kursTitel: kurs.Titel,
                voraussetzungen: vorausTitel
            });
        }
    }

    // Sortieren nach Kurs-Titel
    results.sort((a, b) => a.kursTitel.localeCompare(b.kursTitel));

    // Ausgabe
    for (const eintrag of results) {
        const vorausText = eintrag.voraussetzungen ? eintrag.voraussetzungen.join(', ') : 'NULL';
        console.log(`${eintrag.kursTitel.padEnd(25)}${vorausText}`);
    }

    // g) alle Teilnehmer, die einen Kurs am eigenen Wohnort gebucht haben
    /**
     * @old-relational-table Teilnehmer, Angebot, Nimmt_teil
     * @collections teilnehmer, teilnehmer/{TnNr}/teilnahmen, angebote
     *
     * @logic
     * üî∏ In SQL:
     *   SELECT t.Name, a.Ort
     *   FROM Teilnehmer t
     *   JOIN Nimmt_teil nt ON t.TnNr = nt.TnNr
     *   JOIN Angebot a ON a.AngNr = nt.AngNr
     *   WHERE t.Ort = a.Ort;
     *
     * üîπ In Firestore:
     *   - Alle Teilnehmer laden
     *   - F√ºr jeden Teilnehmer ‚Üí Sub-Collection teilnahmen lesen
     *   - F√ºr jede Teilnahme ‚Üí passendes Angebot per ID laden
     *   - Wohnort vom Teilnehmer mit Ort des Angebots vergleichen
     *   - Bei √úbereinstimmung ausgeben
     *
     * @difference-to-sql
     *   In SQL reicht ein einziger JOIN mit WHERE-Bedingung.
     *   In Firestore sind mehrere Reads notwendig: Teilnehmer ‚Üí Teilnahmen ‚Üí Angebot.
     */
    console.log('\nüë• Teilnehmer am eigenen Wohnort:');
    const teilnehmerSnapshot = await db.collection('teilnehmer').withConverter(createConverter<Teilnehmer>()).get();
    for (const tnDoc of teilnehmerSnapshot.docs) {
        const teilnehmer = tnDoc.data();
        const teilnahmenSnap = await tnDoc.ref.collection('teilnahmen').withConverter(createConverter<Teilnahme>()).get();
        for (const teilnahme of teilnahmenSnap.docs) {
            const { AngNr } = teilnahme.data();
            const angebot = await db.collection('angebote').doc(AngNr).withConverter(createConverter<Angebot>()).get();
            if (angebot.exists && angebot.data()?.Ort === teilnehmer.Ort) {
                console.log(`- ${teilnehmer.Name}: ${angebot.data()?.Ort}`);
            }
        }
    }

    // h) alle Kursangebote (Kurstitel und Angebotsnummer), zu denen es noch keine Teilnehmer gibt
    /**
     * @old-relational-table Angebot, Nimmt_teil, Teilnehmer
     * @collections angebote, teilnehmer/{TnNr}/teilnahmen (Sub-Collection aus teilnehmer)
     *
     * @logic
     * üî∏ In SQL:
     *   SELECT * FROM Angebot a
     *   LEFT JOIN Nimmt_teil nt ON a.AngNr = nt.AngNr
     *   WHERE nt.TnNr IS NULL;
     *
     * üîπ In Firestore:
     *   - Alle `teilnahmen` √ºber Collection Group (`collectionGroup('teilnahmen')`) abrufen
     *   - Belegte `AngNr` in Set speichern
     *   - Alle `angebote` durchlaufen
     *   - Wenn `angebot.id` nicht im Set: Ausgabe
     *   - Titel √ºber `kurse` via KursNr nachladen
     *
     * @difference-to-sql
     *   Firestore kennt kein LEFT JOIN ‚Üí manuelle Filterlogik
     *   `collectionGroup` erlaubt globale Abfrage √ºber alle Teilnahmen
     *   (-> `collectionGroup` ist eine M√∂glichkeit alle Collections mit dem gleichen Namen zu durchsuchen)
     */
    console.log('\nüìö Kursangebote ohne Teilnehmer:');
    const angeboteSnapshot3 = await db.collection('angebote').withConverter(createConverter<Angebot>()).get();
    const belegteAngebote = new Set<string>();

    // 1. Alle belegten Angebote √ºber Collection Group Query holen
    const teilnahmenSnapshot = await db.collectionGroup('teilnahmen').withConverter(createConverter<Teilnahme>()).get();
    teilnahmenSnapshot.forEach(doc => belegteAngebote.add(doc.data().AngNr));

    // 2. Alle Angebote durchgehen, nur die ohne Teilnehmer ausgeben
    for (const angebotDoc of angeboteSnapshot3.docs) {
        if (!belegteAngebote.has(angebotDoc.id)) {
            const angebot = angebotDoc.data();
            const kurs = await db.collection('kurse').doc(angebot.KursNr).withConverter(createConverter<Kurs>()).get();
            const titel = kurs.exists ? kurs.data()?.Titel : angebot.KursNr;
            console.log(`- ${titel}, Angebot ${angebotDoc.id}`);
        }
    }

    // i) alle Kurse (egal welches Angebot) mit mindestens 2 Teilnehmern
    /**
     * @old-relational-table Nimmt_teil, Angebot, Kurs
     * @collections teilnehmer/{TnNr}/teilnahmen (Sub-Collection aus teilnehmer), angebote, kurse
     *
     * @logic
     * üî∏ In SQL:
     *   SELECT k.Titel, COUNT(*) AS Anzahl
     *   FROM Nimmt_teil nt
     *   JOIN Angebot a ON nt.AngNr = a.AngNr
     *   JOIN Kurs k ON a.KursNr = k.KursNr
     *   GROUP BY a.KursNr
     *   HAVING COUNT(*) >= 2;
     *
     * üîπ In Firestore:
     *  - Alle `angebote` laden: Map<AngNr ‚Üí KursNr>
     *  - Alle `teilnahmen` √ºber Collection Group Query (`collectionGroup('teilnahmen')`)
     *  - Z√§hlung: KursNr ‚Üí Teilnehmeranzahl
     *  - Alle `kurse` laden: KursNr ‚Üí Titel
     *  - Ausgabe: Kurse mit mindestens 2 Teilnehmern
     *
     * @difference-to-sql
     *   Kein echtes GROUP BY ‚Üí Aggregation erfolgt clientseitig
     *   `collectionGroup` erm√∂glicht effiziente Abfrage aller Teilnahmen
     *   Aggregation mit einfachem Z√§hlerobjekt auf KursNr-Ebene
     */
    console.log('\nüìö Kurse mit mindestens 2 Teilnehmern (alle Angebote zusammengefasst):');

    // 1. Alle Angebote laden: Map<AngNr, KursNr>
    const angeboteSnapshot4 = await db.collection('angebote').withConverter(createConverter<Angebot>()).get();
    const angebotZuKurs = new Map<string, string>();
    for (const doc of angeboteSnapshot4.docs) {
        const { KursNr } = doc.data();
        angebotZuKurs.set(doc.id, KursNr);
    }

    // 2. Alle Teilnahmen √ºber Collection Group Query laden
    const teilnahmenSnapshot1 = await db.collectionGroup('teilnahmen').withConverter(createConverter<Teilnahme>()).get();
    const kursTeilnehmerCounter: Record<string, number> = {};

    for (const teilnahme of teilnahmenSnapshot1.docs) {
        const { AngNr } = teilnahme.data();
        const kursNr = angebotZuKurs.get(AngNr);
        if (kursNr) kursTeilnehmerCounter[kursNr] = (kursTeilnehmerCounter[kursNr] || 0) + 1;
    }

    // 3. Alle Kurse laden: Map<KursNr, Titel>
    const kurseSnapshot1 = await db.collection('kurse').withConverter(createConverter<Kurs>()).get();
    const kursTitelMap = new Map<string, string>();
    for (const doc of kurseSnapshot1.docs) {
        kursTitelMap.set(doc.id, doc.data().Titel);
    }

    // 4. Ausgabe: Nur Kurse mit mindestens 2 Teilnehmern
    for (const [kursNr, anzahl] of Object.entries(kursTeilnehmerCounter)) {
        if (anzahl >= 2) {
            const titel = kursTitelMap.get(kursNr) ?? kursNr;
            console.log(`- ${titel}: ${anzahl} Teilnehmer`);
        }
    }

    // j) alle Meier, sowohl Teilnehmer als auch Kursleiter
    /**
     * @old-relational-table Teilnehmer, Kursleiter
     * @collections teilnehmer, Kursleiter
     *
     * @logic
     *   üî∏ In SQL:
     *       SELECT * FROM Teilnehmer WHERE name LIKE '%Meier%' UNION SELECT * FROM Kursleiter
     *       WHERE name LIKE '%Meier%';
     *   üîπ In Firestore:
     *       Zwei separate Abfragen:
     *          - teilnehmer: Name >= 'Meier' und Name <= 'Meier\uf8ff'
     *          - kursleiter: Name >= 'Meier' und Name <= 'Meier\uf8ff'
     *
     * @difference-to-sql
     *   In SQL k√∂nnen Daten aus mehreren Tabellen mit UNION kombiniert werden. In Firestore kann jede
     *   Read-Operation nur auf eine Collection angewendet werden, daher werden zwei separate Abfragen durchgef√ºhrt.
     */
    console.log('\nüë• Alle Meier:');
    const teilnehmerMeier = await db.collection('teilnehmer')
        .where('Name', '>=', 'Meier')
        .where('Name', '<=', 'Meier\uf8ff')
        .withConverter(createConverter<Teilnehmer>())
        .get();
    teilnehmerMeier.forEach(doc => console.log(`- Teilnehmer: ${doc.data().Name}`));
    const kursleiterMeier = await db.collection('kursleiter')
        .where('Name', '>=', 'Meier')
        .where('Name', '<=', 'Meier\uf8ff')
        .withConverter(createConverter<Kursleiter>())
        .get();
    kursleiterMeier.forEach(doc => console.log(`- Kursleiter: ${doc.data().Name}`));

    // k) die Kurstitel mit der jeweiligen Anzahl der Angebote
    /**
     * @old-relational-table Kurs, Angebot
     * @collections angebote, kurse
     *
     * @logic
     *   üî∏ In SQL:
     *       SELECT k.titel, COUNT(a.id) AS angebote_count FROM Kurs k LEFT JOIN Angebot a ON k.KursNr = a.KursNr
     *       GROUP BY k.KursNr, k.Titel ORDER BY k.Titel;
     *   üîπ In Firestore:
     *      - Alle `kurse` laden ‚Üí Map<KursNr ‚Üí Titel> + Z√§hler auf 0
     *      - Alle `angebote` laden ‚Üí pro `KursNr` z√§hlen
     *      - Ausgabe sortiert nach Titel
     *
     * @difference-to-sql
     *   Firestore unterst√ºtzt keine JOINs ‚Üí Titel manuell aus `kurse` laden
     *   Auch kein GROUP BY oder aggregiertes COUNT pro Gruppe
     *   `count()` von Firestore kann **nicht gruppieren** (nur Gesamtanzahl oder gefilterte Query z√§hlen)
     *   Daher erfolgt Gruppierung und Z√§hlung manuell per JavaScript (Map + Counter)
     */
    console.log('\nüìö Kurstitel mit Anzahl der Angebote:');

    // Kurse laden
    let kursTitelMap1 = new Map<string, string>();
    const angeboteCounter = new Map<string, number>();

    const kurseSnapshot2 = await db.collection('kurse').withConverter(createConverter<Kurs>()).get();
    kurseSnapshot2.forEach(doc => {
        const kursNr = doc.id;
        const titel = doc.data().Titel;
        kursTitelMap1.set(kursNr, titel);
        angeboteCounter.set(kursNr, 0); // vorinitialisieren mit 0
    });

    // Angebote z√§hlen
    const angeboteSnapshot5 = await db.collection('angebote').withConverter(createConverter<Angebot>()).get();
    angeboteSnapshot5.forEach(doc => {
        const { KursNr } = doc.data() as Angebot;
        if (angeboteCounter.has(KursNr)) {
            angeboteCounter.set(KursNr, (angeboteCounter.get(KursNr) ?? 0) + 1);
        } else {
            // falls es ein Angebot f√ºr einen Kurs gibt, der nicht mehr in 'kurse' existiert
            angeboteCounter.set(KursNr, 1);
            kursTitelMap1.set(KursNr, KursNr);
        }
    });

    // Ausgabe
    [...angeboteCounter.entries()]
        .sort(([a], [b]) => (kursTitelMap1.get(a) ?? a).localeCompare(kursTitelMap1.get(b) ?? b))
        .forEach(([kursNr, count]) => {
            const titel = kursTitelMap1.get(kursNr) ?? kursNr;
            console.log(`- ${titel}: ${count} Angebote`);
        });

    // l) die Kurstitel mit der Anzahl der Voraussetzungen, die mindestens 2 Voraussetzungen haben. Die Ausgabe
    // soll so erfolgen, dass die Kurse mit den meisten Voraussetzungen zuerst kommen
    /**
     * @old-relational-table Vorauss, Kurs
     * @collections kurse, kurse/{KursNr}/voraussetzungen (Sub-Collection aus Kurse)
     *
     * @logic
     *   üî∏ In SQL:
     *       SELECT k.titel FROM Kurs k JOIN Vorauss v ON k.KursNr = v.KursNr GROUP BY k.KursNr,
     *       k.Titel HAVING COUNT(v.VorNr) >= 2;
     *   üîπ In Firestore:
     *      - Alle `kurse` laden
     *      - F√ºr jeden Kurs: Sub-Collection `voraussetzungen` laden und z√§hlen
     *      - Wenn Anzahl ‚â• 2 ‚Üí Kurs aufnehmen
     *
     * @difference-to-sql
     *    Firestore kennt kein JOIN oder GROUP BY ‚Üí manuelle Verarbeitung n√∂tig
     *    `count()` auf Sub-Collections w√§re nur in Server SDKs (z. B. Admin SDK) m√∂glich,
     *     spart aber kaum Aufwand, da die Sub-Collection ohnehin geladen werden muss
     */
    console.log('\nüìöKurse mit mindestens 2 Voraussetzungen (absteigend sortiert):');
    const kurseMitVoraussetzungen: { titel: string; anzahl: number }[] = [];

    const kurseSnapshot3 = await db.collection('kurse').withConverter(createConverter<Kurs>()).get();
    for (const kursDoc of kurseSnapshot3.docs) {
        const titel = kursDoc.data().Titel;
        const vorausSnap = await kursDoc.ref.collection('voraussetzungen').get();

        if (vorausSnap.size >= 2) {
            kurseMitVoraussetzungen.push({
                titel,
                anzahl: vorausSnap.size
            });
        }
    }

    // Nach Anzahl absteigend sortieren
    kurseMitVoraussetzungen.sort((a, b) => b.anzahl - a.anzahl);

    // Ausgabe
    for (const kurs of kurseMitVoraussetzungen) {
        console.log(`- ${kurs.titel}: ${kurs.anzahl} Voraussetzungen`);
    }

    // m) f√ºr alle Kurse (Titel ausgeben) das durchschnittliche Gehalt der Kursleiter, die ein Angebot dieses
    // Kurses durchf√ºhren (nach diesem Durchschnitt aufsteigend sortiert)
    /**
     * @old-relational-table Kurs, Fuehrt_Durch, Kursleiter
     * @collections angebote, angebote/{PersNr}/kursleiter (Sub-Collection aus angebote)
     *
     * @logic
     *   üî∏ In SQL: SELECT k.Titel, AVG(kl.Gehalt) FROM Kurs k JOIN Fuehrt_Durch fd ON k.KursNr = fd.KursNr
     *   JOIN Kursleiter kl ON fd.PersNr = kl.PersNr GROUP BY k.KursNr, k.Titel;
     *   üîπ In Firestore:
     *     - Alle `angebote` laden
     *      - Je Angebot: Sub-Collection `kursleiter` abrufen
     *      - F√ºr jede KursNr: Geh√§lter sammeln
     *      - Durchschnitt berechnen und sortieren
     *
     * @difference-to-sql
     *    Kein GROUP BY oder AVG in Firestore
     *    `average()` von Firestore ist aktuell nur auf flachen Collections ohne Gruppierung m√∂glich
     *    Aggregation daher manuell (Map<KursNr ‚Üí Gehaltsliste> + clientseitiges avg)
     */
    console.log('\nüìö Durchschnittliches Gehalt der Kursleiter pro Kurs (aufsteigend):');

    const kursGehaelterMap = new Map<string, { titel: string; gehaelter: number[] }>();
    const angeboteSnapshot6 = await db.collection('angebote').withConverter(createConverter<Angebot>()).get();

    for (const angebot of angeboteSnapshot6.docs) {
        const { KursNr, KursTitel } = angebot.data();

        // Sub-Collection 'kursleiter' laden
        const kursleiterSnap = await angebot.ref.collection('kursleiter').withConverter(createConverter<Kursleiter>()).get();

        if (!kursGehaelterMap.has(KursNr)) {
            kursGehaelterMap.set(KursNr, { titel: KursTitel ?? KursNr, gehaelter: [] });
        }

        for (const leiter of kursleiterSnap.docs) {
            kursGehaelterMap.get(KursNr)?.gehaelter.push(leiter.data().Gehalt);
        }
    }

    // Ergebnisse berechnen
    const result: { titel: string; avg: number }[] = [];

    for (const { titel, gehaelter } of kursGehaelterMap.values()) {
        if (gehaelter.length === 0) continue;
        const avg = gehaelter.reduce((a, b) => a + b, 0) / gehaelter.length;
        result.push({ titel, avg });
    }

    // Aufsteigend sortieren
    result.sort((a, b) => a.avg - b.avg);

    // Ausgabe
    for (const { titel, avg } of result) {
        console.log(`- ${titel}: ${avg.toFixed(2)} ‚Ç¨`);
    }


    // n) alle Paare von Kursleitern, die denselben Kurs halten, und den entsprechenden Kurstiteln.
    // Geben Sie jedes Paar nur einmal aus
    /**
     * @old-relational-table Fuehrt_Durch, Kursleiter, Kurs
     * @collections angebote, angebote/{PersNr}/kursleiter (Sub-Collection aus angebote)
     *
     * @logic
     *   üî∏ In SQL:
     *       SELECT kl1.Name, kl2.Name, k.Titel
     *       FROM Fuehrt_Durch fd1
     *       JOIN Fuehrt_Durch fd2 ON fd1.KursNr = fd2.KursNr AND fd1.PersNr < fd2.PersNr
     *       JOIN Kursleiter kl1 ON fd1.PersNr = kl1.PersNr
     *       JOIN Kursleiter kl2 ON fd2.PersNr = kl2.PersNr
     *       JOIN Kurs k ON fd1.KursNr = k.KursNr;
     *   üîπ In Firestore:
     *       Alle `angebote`-Dokumente laden.
     *       Pro KursNr alle darin vorkommenden Kursleiter (√ºber mehrere Angebote hinweg) sammeln.
     *       Sobald mindestens zwei Kursleiter f√ºr denselben Kurs vorhanden sind, alle eindeutigen Paare bilden
     *       und mit dem redundanten `KursTitel` direkt ausgeben.
     *
     * @difference-to-sql
     *   Kein Self-Join m√∂glich ‚Äì Paare m√ºssen im Client konstruiert werden.
     *   Dank Redundanz des Kurstitels in 'angebote' konnten die zus√§tzlichen Abfragen verringert werden.
     */
    console.log('\nüë©‚Äçüè´ Kursleiter-Paare f√ºr denselben Kurs:');

    // Kursleiter je KursNr sammeln
    const kursleiterProKurs: Record<string, Map<number, string>> = {}; // KursNr ‚Üí Map<PersNr, Name>
    const kursTitelMap2 = new Map<string, string>();

    const angeboteSnapshot7 = await db.collection('angebote').withConverter(createConverter<Angebot>()).get();
    for (const angebot of angeboteSnapshot7.docs) {
        const angebotData = angebot.data();
        const kursNr = angebotData.KursNr;
        const titel = angebotData.KursTitel ?? kursNr;
        kursTitelMap2.set(kursNr, titel);

        // Sub-Collection "kursleiter" lesen
        const leiterSnap = await angebot.ref.collection('kursleiter').withConverter(createConverter<Kursleiter>()).get();

        for (const doc of leiterSnap.docs) {
            const { Name } = doc.data();

            if (!kursleiterProKurs[kursNr]) {
                kursleiterProKurs[kursNr] = new Map();
            }

            kursleiterProKurs[kursNr].set(Number(doc.id), Name); // Duplikate werden durch Map automatisch vermieden
        }
    }

    // Paare bilden
    for (const [kursNr, leiterMap] of Object.entries(kursleiterProKurs)) {
        const titel = kursTitelMap2.get(kursNr) ?? kursNr;
        const leiter = Array.from(leiterMap.entries()); // [PersNr, Name]

        if (leiter.length < 2) continue;

        for (let i = 0; i < leiter.length - 1; i++) {
            for (let j = i + 1; j < leiter.length; j++) {
                const name1 = leiter[i][1];
                const name2 = leiter[j][1];
                console.log(`- ${titel}: ${name1} & ${name2}`);
            }
        }
    }


    console.log('\n‚úÖ Fertig.');
}

#### Ausgabe der Read Queries:

üìñ Aufgabe 4: Read Queries

üìç Orte: [ 'Wedel', 'Augsburg', 'Mindelheim', 'Ulm', 'Muenchen' ]

üë• Teilnehmer aus Augsburg:
- Huber, Chr.
- Kircher, B.
- Karstens, L.

üë©‚Äçüè´ Kursleiter (Gehalt 3000‚Ç¨-4000‚Ç¨):
- Mueller, K.: 3400.8‚Ç¨
- Schulze, H.: 3890.2‚Ç¨

üìö Kurstitel mit Datum und Ort:
- Grundlagen I: 13.10.2023 in Wedel
- Grundlagen II: 1.12.2023 in Augsburg
- Datenbanken: 27.3.2023 in Mindelheim
- C-Programmierung: 28.5.2023 in Augsburg
- Grundlagen I: 24.11.2023 in Ulm
- Grundlagen II: 15.2.2023 in Muenchen
- Datenbanken: 23.4.2023 in Muenchen
- C-Programmierung: 1.7.2023 in Augsburg
- Datenbanken: 29.5.2023 in Ulm

üìö Kurstitel mit Datum, Ort und Kursleiter:
- Grundlagen I: 13.10.2023, in Wedel, Kursleiter: Huber, L.
- Grundlagen II: 1.12.2023, in Augsburg, Kursleiter: Mueller, K.
- Datenbanken: 27.3.2023, in Mindelheim, Kursleiter: Schulze, H.
- C-Programmierung: 28.5.2023, in Augsburg, Kursleiter: Meier, I.
- Grundlagen I: 24.11.2023, in Ulm, Kursleiter: Huber, L.
- Grundlagen II: 15.2.2023, in Muenchen, Kursleiter: Schulze, H.
- Datenbanken: 23.4.2023, in Muenchen, Kursleiter: Schulze, H.
- C-Programmierung: 1.7.2023, in Augsburg, Kursleiter: Meier, I.
- Datenbanken: 29.5.2023, in Ulm, Kursleiter: Schulze, H.

üìö Kurstitel mit Voraussetzungen:
Kurs                     Voraussetzungen
C-Programmierung         Grundlagen I, Grundlagen II
Datenbanken              Grundlagen I, Grundlagen II, C-Programmierung
Grundlagen I             NULL
Grundlagen II            NULL

üë• Teilnehmer am eigenen Wohnort:
- Kircher, B.: Augsburg

üìö Kursangebote ohne Teilnehmer:
- Grundlagen II, Angebot 1_G10
- Grundlagen II, Angebot 2_G10
- Datenbanken, Angebot 3_I09

üìö Kurse mit mindestens 2 Teilnehmern (alle Angebote zusammengefasst):
- Grundlagen I: 2 Teilnehmer
- C-Programmierung: 5 Teilnehmer
- Datenbanken: 6 Teilnehmer

üë• Alle Meier:
- Teilnehmer: Meier, K.
- Teilnehmer: Meier, W.
- Kursleiter: Meier, I.

üìö Kurstitel mit Anzahl der Angebote:
- C-Programmierung: 2 Angebote
- Datenbanken: 3 Angebote
- Grundlagen I: 2 Angebote
- Grundlagen II: 2 Angebote

üìöKurse mit mindestens 2 Voraussetzungen (absteigend sortiert):
- Datenbanken: 3 Voraussetzungen
- C-Programmierung: 2 Voraussetzungen

üìö Durchschnittliches Gehalt der Kursleiter pro Kurs (aufsteigend):
- Grundlagen II: 3645.50 ‚Ç¨
- Datenbanken: 3890.20 ‚Ç¨
- Grundlagen I: 4200.10 ‚Ç¨
- C-Programmierung: 4300.50 ‚Ç¨

üë©‚Äçüè´ Kursleiter-Paare f√ºr denselben Kurs:
- Grundlagen II: Mueller, K. & Schulze, H.

‚úÖ Fertig.

#### Aufgabe 5: Update Queries:

async function aufgabe5() {
    console.log('‚ôªÔ∏è Aufgabe 5: Update Queries\n');

    // a) Alle Angebote vom Jahr 2023 auf 2024 aktualisieren
    /**
     * @old-relational-table Angebot
     * @collection angebote
     *
     * @logic
     *   üî∏ In SQL einfache UPDATE-Anweisung:
     *          UPDATE Angebot SET Datum = DATE + INTERVAL '1 year' WHERE EXTRACT(YEAR FROM Datum) = 2023;
     *   üîπ In Firestore:
     *          - laden aller Angebote, bei welchen der Timestamp im Jahr 2023 liegt
     *          - ab√§ndern des Timestamps
     *          - anschlie√üendes updaten in der Datenbank
     *
     * @difference-to-sql
     *    Laden aller Angebote, welche im Jahr 2023 stattfinden und anschlie√üendes manuelles Ab√§ndern des Datums, sowie speichern in der Datenbank.
     *    In SQL erfolgt dies automatisch mit der Update-Anweisung
     */
    const startOf2023 = Timestamp.fromDate(new Date("2023-01-01T00:00:00Z"));
    const startOf2024 = Timestamp.fromDate(new Date("2024-01-01T00:00:00Z"));

    const angebote2023 = await db.collection('angebote')
        .withConverter(createConverter<Angebot>())
        .where('Datum', '>=', startOf2023)
        .where('Datum', '<', startOf2024)
        .get();
    for (const doc of angebote2023.docs) {
        const angebot = doc.data();
        const date = angebot.Datum.toDate();
        const neuesDatum = Timestamp.fromDate(new Date(date.setFullYear(2024)));
        await doc.ref.update({Datum: neuesDatum});
        console.log(`üîÑ Angebot ${doc.id} Datum aktualisiert auf ${neuesDatum.toDate().toLocaleDateString()}`);
    }

    // b) Alle Angebote von "Wedel" nach "Augsburg"
    /**
     * @old-relational-table Angebot
     * @collection angebote
     *
     * @logic
     *   üî∏ In SQL einfache UPDATE-Anweisung:
     *          UPDATE Angebot SET Ort = 'Augsburg' WHERE Ort = 'Wedel';
     *
     *   üîπ In Firestore:
     *          - laden aller Angebote mit Ort == 'Wedel'
     *          - iterieren √ºber alle erhaltenen Angebote mit Updaten des Orts in der Datenbank
     *
     * @difference-to-sql
     *    Manuelles Updaten der Dokumente.
     */
    const angeboteWedel = await db.collection('angebote')
        .withConverter(createConverter<Angebot>())
        .where('Ort', '==', 'Wedel').get();

    for (const doc of angeboteWedel.docs) {
        await doc.ref.update({ Ort: 'Augsburg' });
        console.log(`üìç Angebot ${doc.id} von Wedel nach Augsburg verschoben.`);
    }


    /**
     * Sobald man update-Anfragen hat, die mehrere Collections betreffen, bei denen mehrere Daten redundant gehalten werden,
     * dann sollte man in Betracht ziehen, eine Transaktion oder Batch-Operation zu verwenden. Diese Vorgehensweise
     * wird beispielhaft bei den delete-Queries als Kommentar am Ende der Datei beschrieben.
     */


    console.log('\n‚úÖ Fertig.');
}

#### Ausgabe der Update Queries:

‚ôªÔ∏è Aufgabe 5: Update Queries

üîÑ Angebot 2_G10 Datum aktualisiert auf 15.2.2024
üîÑ Angebot 1_I09 Datum aktualisiert auf 27.3.2024
üîÑ Angebot 2_I09 Datum aktualisiert auf 23.4.2024
üîÑ Angebot 1_P13 Datum aktualisiert auf 28.5.2024
üîÑ Angebot 3_I09 Datum aktualisiert auf 29.5.2024
üîÑ Angebot 2_P13 Datum aktualisiert auf 1.7.2024
üîÑ Angebot 1_G08 Datum aktualisiert auf 13.10.2024
üîÑ Angebot 2_G08 Datum aktualisiert auf 24.11.2024
üîÑ Angebot 1_G10 Datum aktualisiert auf 1.12.2024
üìç Angebot 1_G08 von Wedel nach Augsburg verschoben.

‚úÖ Fertig.

#### Aufgabe 6: Delete Queries:

async function aufgabe6() {
    console.log('üóëÔ∏è Aufgabe 6: Delete Queries\n');

    // a) L√∂sche die Kursliteratur f√ºr "C-Programmierung"
    /**
     * @old-relational-table Kurs, KursLiteratur
     * @collections kurse, kurse/{KursNr}/kursliteratur (Sub-Collection aus kurse)
     *
     * @id
     *   In "kurse": Dokumenten-ID = KursNr (z. B.: "P13")
     *   In Sub-Collection "kursliteratur": Dokumenten-ID = "standard"
     *
     * @logic
     *   üî∏ In SQL:
     *      Ermittle KursNr f√ºr den Kurs mit Titel "C-Programmierung"
     *          SELECT KursNr FROM Kurs WHERE Titel = 'C-Programmierung';
     *      L√∂sche die zugeh√∂rige Literatur:
     *          DELETE FROM KursLiteratur WHERE KursNr = 'P13';
     *
     *   üîπ In Firestore:
     *      1. Suche im Collection "kurse" nach einem Dokument mit Feld `Titel` == "C-Programmierung".
     *      2. Greife auf das Dokument `kursliteratur/standard` innerhalb des gefundenen Kurses zu.
     *      3. L√∂sche das Dokument `standard` in der Sub-Collection `kursliteratur`.
     *
     * @risk
     * Es gibt keine automatische Pr√ºfung oder Foreign-Key-Beziehungen:
     * - Die Literatur kann gel√∂scht werden, auch wenn sie noch z. B. in einem Angebot verwendet wird.
     * - Entwickler m√ºssen selbst f√ºr Konsistenz sorgen.
     *
     * @difference-to-sql
     * In SQL gen√ºgt ein einfacher `DELETE` mit WHERE-Klausel √ºber `KursNr`.
     * In Firestore ist eine Suche nach dem Titel erforderlich,
     * gefolgt vom Zugriff auf die Sub-Collection `kursliteratur`, um das "standard"-Dokument zu l√∂schen.
     */
    const kursSnapshot = await db.collection('kurse')
        .withConverter(createConverter<Kurs>())
        .where('Titel', '==', 'C-Programmierung').get();

    if (kursSnapshot.empty) {
        console.log('‚ùå Kurs "C-Programmierung" nicht gefunden.');
    } else {
        const kursDocRef = kursSnapshot.docs[0].ref;
        const litRef = kursDocRef.collection('kursliteratur').doc('standard');
        await litRef.delete();
        console.log('üìö Kursliteratur f√ºr "C-Programmierung" gel√∂scht.');
    }

    // b) L√∂sche alle Kursangebote mit weniger als 2 Teilnehmern
    /**
     * @old-relational-table Nimmt_teil, Angebot, Geb√ºhren
     * @collections angebote, teilnehmer, teilnehmer/{TnNr}/teilnahmen (Sub-Collection aus teilnehmer)
     *
     * @id
     *   In "angebote": Dokumenten-ID = AngNr_KursNr (z.B.: "2_P13")
     *   In "teilnehmer": Dokumenten-ID = TnNr
     *   In Sub-Collection "teilnahmen": Feld AngNr_KursNr referenziert Angebot
     *
     * @logic
     *   üî∏ In SQL:
     *      Finde Angebote mit weniger als 2 Teilnehmern:
     *             SELECT A.AngNr
     *             FROM Angebot A
     *             JOIN Nimmt_teil NT ON A.AngNr = NT.AngNr
     *             GROUP BY A.AngNr
     *             HAVING COUNT(*) < 2;
     *
     *      L√∂sche die Eintr√§ge in "Nimmt_teil" und "Gebuehren":
     *             DELETE FROM Nimmt_teil WHERE AngNr = <zu l√∂schende AngNr>;
     *             DELETE FROM Gebuehren WHERE AngNr = <zu l√∂schende AngNr>;
     *
     *      L√∂sche das Angebot:
     *             DELETE FROM Angebot WHERE AngNr = <zu l√∂schende AngNr>;
     *
     *   üîπ In Firestore:
     *       1. Lade alle Dokumente aus "angebote" und "teilnehmer".
     *       2. Z√§hle pro Angebot, wie viele Teilnehmer eine Teilnahme mit der entsprechenden AngNr_KursNr haben.
     *       3. Wenn die Anzahl < 2, l√∂sche:
     *                - das Angebot selbst
     *                - alle zugeh√∂rigen "teilnahmen"
     * @risk
     * In Firestore gibt es keine referenzielle Integrit√§t:
     *      - Teilnahmen, die auf nicht existierende Angebote zeigen, m√ºssen manuell bereinigt werden.
     *      - Ein versehentliches L√∂schen kann nicht durch Constraints verhindert werden.
     *      - Entwickler m√ºssen sicherstellen, dass keine "verwaisten" Dokumente entstehen.
     *      - Ohne Transaktionen oder Batch-Operationen kann es zu Inkonsistenzen beim L√∂schen kommen
     *
     * @difference-to-sql
     * - In Firestore gibt es KEINE Kombination aus JOIN + WHERE + DELETE + GROUP BY oder CASCADEN-Delete.
     * - In SQL kann man JOINS und Bedingungen direkt im DELETE kombinieren.
     * - In Firestore m√ºssen Dokumente einzeln geladen und verglichen werden.
     * - Z√§hlung und Selektion m√ºssen manuell in der Applikation durchgef√ºhrt werden.
     * - Zudem erfolgt die Navigation zu "teilnahmen" √ºber die Sub-Collection jedes Teilnehmers.
     */
      const angeboteSnapshot = await db.collection('angebote').withConverter(createConverter<Angebot>()).get();
      const teilnehmerSnapshot = await db.collection('teilnehmer').withConverter(createConverter<Teilnehmer>()).get();

      const angebotTeilnahmeZaehler: Record<string, number> = {};
      const zuLoeschendeAngebote: string[] = [];

      // Z√§hle die Teilnehmer pro Angebot
      for (const teilnehmerDoc of teilnehmerSnapshot.docs) {
          const teilnahmenSnap = await teilnehmerDoc.ref.collection('teilnahmen').get();
          for (const t of teilnahmenSnap.docs) {
              const { AngNr } = t.data() as Teilnahme;
              angebotTeilnahmeZaehler[AngNr] = (angebotTeilnahmeZaehler[AngNr] || 0) + 1;
          }
      }

      // L√∂sche Angebote mit < 2 Teilnehmern und merke dir die AngNr_KursNr
      for (const angebotDoc of angeboteSnapshot.docs) {
          const angebotId = angebotDoc.id;
          const teilnehmerAnzahl = angebotTeilnahmeZaehler[angebotId] || 0;
          if (teilnehmerAnzahl < 2) {
              await angebotDoc.ref.collection('kursleiter').get().then(kursleiterSnap => {
                  // L√∂sche alle Kursleiter f√ºr dieses Angebot
                  const deletePromises = kursleiterSnap.docs.map(k => k.ref.delete());
                  return Promise.all(deletePromises);
              });
              await angebotDoc.ref.delete();
              zuLoeschendeAngebote.push(angebotId);
              console.log(`üóëÔ∏è Angebot ${angebotId} gel√∂scht (nur ${teilnehmerAnzahl} Teilnehmer).`);
          }
      }

      // L√∂sche zugeh√∂rige Teilnahmen in allen Teilnehmer-Dokumenten
      for (const teilnehmerDoc of teilnehmerSnapshot.docs) {
          const teilnahmenSnap = await teilnehmerDoc.ref.collection('teilnahmen').get();
          for (const t of teilnahmenSnap.docs) {
              const { AngNr } = t.data() as Teilnahme;
              if (zuLoeschendeAngebote.includes(AngNr)) {
                  await t.ref.delete();
                  console.log(`üóëÔ∏è Teilnahme ${t.id} von Teilnehmer ${teilnehmerDoc.id} gel√∂scht (bezog sich auf Angebot ${AngNr}).`);
              }
          }
      }


    /**
     * Hinweis: Zusatz zu Aufgabe b - L√∂schen von Angeboten mit <2 Teilnehmern
     * Transaktion und Batch-Operationen f√ºr konsistente L√∂schvorg√§nge bei gro√üen Datenmengen
     *
     * const angeboteSnapshot = await db.collection('angebote').withConverter(createConverter<Angebot>()).get();
     * const teilnehmerSnapshot = await db.collection('teilnehmer').withConverter(createConverter<Teilnehmer>()).get();
     *
     * Z√§hle die Teilnehmer pro Angebot
     *  const angebotTeilnahmeZaehler: Record<string, number> = {};
     *  for (const teilnehmerDoc of teilnehmerSnapshot.docs) {
     *  const teilnahmenSnap = await teilnehmerDoc.ref.collection('teilnahmen').get();
     *  for (const t of teilnahmenSnap.docs) {
     *      const { AngNr } = t.data() as Teilnahme;
     *      angebotTeilnahmeZaehler[AngNr] = (angebotTeilnahmeZaehler[AngNr] || 0) + 1;
     *      }
     *  }
     *
     *  const zuLoeschendeAngebote: string[] = [];
     *
     *  await db.runTransaction(async (transaction) => {
     *      for (const angebotDoc of angeboteSnapshot.docs) {
     *          const angebotId = angebotDoc.id;
     *          const teilnehmerAnzahl = angebotTeilnahmeZaehler[angebotId] || 0;
     *
     *          if (teilnehmerAnzahl < 2) {
     *              const kursleiterSnap = await angebotDoc.ref.collection('kursleiter').get();
     *              kursleiterSnap.docs.forEach(kursleiterDoc => {
     *                  transaction.delete(kursleiterDoc.ref);
     *              });
     *
     *              transaction.delete(angebotDoc.ref);
     *              zuLoeschendeAngebote.push(angebotId);
     *
     *              console.log(`üóëÔ∏è Angebot ${angebotId} gel√∂scht in Transaktion (nur ${teilnehmerAnzahl} Teilnehmer).`);
     *          }
     *      }
     *  });
     *
     *  BATCH: L√∂sche verkn√ºpfte Teilnahmen
     *  let batch = db.batch();
     *  let opCount = 0;
     *  const MAX_BATCH_OPS = 490;
     *
     *  for (const teilnehmerDoc of teilnehmerSnapshot.docs) {
     *      const teilnahmenSnap = await teilnehmerDoc.ref.collection('teilnahmen').get();
     *      for (const teilnahmeDoc of teilnahmenSnap.docs) {
     *          const { AngNr } = teilnahmeDoc.data() as Teilnahme;
     *          if (zuLoeschendeAngebote.includes(AngNr)) {
     *              batch.delete(teilnahmeDoc.ref);
     *              console.log(`üóëÔ∏è Teilnahme ${teilnahmeDoc.id} gel√∂scht (bezog sich auf Angebot ${AngNr}).`);
     *
     *              opCount++;
     *              if (opCount >= MAX_BATCH_OPS) {
     *                  await batch.commit();
     *                  batch = db.batch();
     *                  opCount = 0;
     *             }
     *          }
     *    }
     *  }
     *
     *  if (opCount > 0) {
     *      await batch.commit();
     *  }
     */


    console.log('\n‚úÖ L√∂schvorg√§nge abgeschlossen.');
}

#### Ausgabe der Delete Queries:

üóëÔ∏è Aufgabe 6: Delete Queries

üìö Kursliteratur f√ºr "C-Programmierung" gel√∂scht.
üóëÔ∏è Angebot 1_G08 gel√∂scht (nur 1 Teilnehmer).
üóëÔ∏è Angebot 1_G10 gel√∂scht (nur 0 Teilnehmer).
üóëÔ∏è Angebot 2_G08 gel√∂scht (nur 1 Teilnehmer).
üóëÔ∏è Angebot 2_G10 gel√∂scht (nur 0 Teilnehmer).
üóëÔ∏è Angebot 2_I09 gel√∂scht (nur 1 Teilnehmer).
üóëÔ∏è Angebot 3_I09 gel√∂scht (nur 0 Teilnehmer).
üóëÔ∏è Teilnahme teilnahme_0 von Teilnehmer 143 gel√∂scht (bezog sich auf Angebot 2_G08).
üóëÔ∏è Teilnahme teilnahme_0 von Teilnehmer 145 gel√∂scht (bezog sich auf Angebot 1_G08).
üóëÔ∏è Teilnahme teilnahme_0 von Teilnehmer 187 gel√∂scht (bezog sich auf Angebot 2_I09).

‚úÖ L√∂schvorg√§nge abgeschlossen.
